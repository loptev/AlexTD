<% content_for :title, "Tower Defense | Home" %>
<div class="row">
	<div class="large-9 columns">
		<h1>Tower Defense Game</h1>
		<div id="gamescreen">
		</div>
	</div>

	<div class="large-3 columns">
		<h2 style="text-align:center">High Scores</h2>
		<table style="margin-bottom:0">
			<tr>
				<th style = "width:200px">Username</th>
				<th style = "width:100px">High Score</th>
			</tr>
		</table>
		<table id="scoreboard">
			<% @highscores.each do |user| %>
			<tr><td style = "width:200px"><%= user.username %></td><td style = "width:100px"><%= user.highscore %></td></tr>
			<% end %>
		</table>
	</div>
</div>
<% content_for :js do %>
<%= javascript_include_tag "phaser.min.js" %>
<script type="text/javascript">
	var level_data, 
		map, 
		layer, marker,
		currently_dragging, being_dragged, 
		// Groups
		detectors, paths, enemies, towers,
		enemystack = [], 
		counter = 100,
		startwave, startwavebutton, wave = 0;
	var Game = {};

	Game.Preload = function(game){};
	Game.Preload.prototype = {
		preload: function() {
			game.load.spritesheet('startwavebutton', '<%= asset_path('startwave_button.png') %>', 158, 30);
			game.load.tilemap('desert', '<%= asset_path('tiled_test.json') %>', null, Phaser.Tilemap.TILED_JSON);
    		game.load.image('tile_image', '<%= asset_path('desert_tiles_small.png') %>');
			game.physics.startSystem(Phaser.Physics.ARCADE);
			game.load.spritesheet('playbutton', '<%= asset_path('PlayButton.png') %>', 158, 30);
			game.load.image('titleback', '<%= asset_path('titlebackground.png') %>');
			game.load.image('lvlselectback', '<%= asset_path('levelselect.png') %>');
			game.load.image('detector', '<%= asset_path('detector.png') %>');
			game.load.image('background', '<%= asset_path('grass1.jpg') %>');
			game.load.image('badguy1', '<%= asset_path('badguy1.png') %>');
			game.load.image('badguy2', '<%= asset_path('badguy2.png') %>');
			game.load.image('badguy3', '<%= asset_path('badguy3.png') %>');
			game.load.spritesheet('tower1', '<%= asset_path('towerspritesheet1.png') %>', 56, 56, 8);
			game.load.spritesheet('tower2', '<%= asset_path('towerspritesheet2.png') %>', 56, 56, 8);
			game.load.spritesheet('tower3', '<%= asset_path('towerspritesheet3.png') %>', 56, 56, 8);
			game.load.image('corner1', '<%= asset_path('corner_path_1.png') %>');
			game.load.image('corner2', '<%= asset_path('corner_path_2.png') %>');
			game.load.image('corner3', '<%= asset_path('corner_path_3.png') %>');
			game.load.image('corner4', '<%= asset_path('corner_path_4.png') %>');
			game.load.image('horizontal', '<%= asset_path('horizontal_path.png') %>');
			game.load.image('vertical', '<%= asset_path('vertical_path.png') %>');
		},
		create: function() {
			console.log("Preload State Started");
			game.state.start('Titlescreen');
		}
	};
	Game.Titlescreen = function(game) {};
	Game.Titlescreen.prototype = {
		create: function() {
			console.log("Titlescreen State Started");
			game.add.sprite(0, 0, 'titleback');
			game.add.button(game.world.centerX - 79, game.world.centerY - 90, 'playbutton', function() { 
				game.state.start('Actualgame', true, false, 1); 
			}, this, 0, 1, 2);
		}
	};
	Game.Lvlselect = function(game) {};
	Game.Lvlselect.prototype = {
		create: function() {
			console.log("Lvlselect State Started");
			this.game.add.sprite(0, 0, 'lvlselectback');
		}
	};	
	Game.Actualgame = function(game) {
		this.level;
	};
	Game.Actualgame.prototype = {
		init: function (level) {
			console.log("Actualgame State Started");
			this.level = level;
			currently_dragging = false;
		},
		create: function() {
			// Create Background and Map
			game.add.sprite(0, 0, 'background');
			map = game.add.tilemap('desert');
			map.addTilesetImage('Desert', 'tile_image');
			layer = map.createLayer('Ground');
			layer.resizeWorld();
			paths = game.add.group();
			
			// Create Detectors
			detectors = game.add.group();
			detectors.enableBody = true;
			map.createFromObjects('detectors', 1, 'detector', 0, true, false, detectors);
			enemies = game.add.group();
			towers = game.add.group();
			game.physics.enable(towers, Phaser.Physics.ARCADE);
			startwavebutton = game.add.button(10, 100, 'startwavebutton', function() { 
				startwave = true;
				buildwave(wave); 
				wave++;
				startwavebutton.visible = false;
			}, this, 0, 1, 2);
			addUI();
			setuplvl(this.level);
		},
		update: function() {
			if (currently_dragging) {
				marker.x = game.input.activePointer.worldX - 28;
			    marker.y = game.input.activePointer.worldY - 28;				
				being_dragged.reset(game.input.x-being_dragged.width/2, game.input.y-being_dragged.height/2);
			}
			game.physics.arcade.overlap(enemies, detectors, isEnemyInCenter, null, this);
			if (startwave) {
				if (enemystack.length > 0) {
					if (counter >= 100) {
						var enemy = enemystack.shift();
						enemy = Enemy(parseInt(level_data.spawnlocation.x), parseInt(level_data.spawnlocation.y), parseInt(enemy));
						enemy.body.velocity.x = enemy.speed;
						enemy.direction = level_data.startdirection;
						counter = 0;
					}
					counter++;
				} else {
					startwavebutton.visible = true;
					startwave = false;
				}
			}
		}
	};
	function setuplvl(lvl) {
		$.getJSON('<%= asset_path('levels.json') %>', function(data) {
			level_data = data[lvl];
			console.log(level_data);
		});
	}

	function buildwave(wave) {
		for (var i = 0; i < level_data.enemies.waves[wave].length; i++) {
				enemystack[i] = level_data.enemies.waves[wave][i];
		}
	}	

	function addUI(){
		var tower1 = Tower(10, 10, 'tower1');
		tower1.inputEnabled = true;
		tower1.events.onInputDown.add(copyAndDragTower, this);
		var tower2 = Tower(70, 10, 'tower2');
		tower2.inputEnabled = true;
		tower2.events.onInputDown.add(copyAndDragTower, this);
		var tower3 = Tower(130, 10, 'tower3');
		tower3.inputEnabled = true;
		tower3.events.onInputDown.add(copyAndDragTower, this);

	}
	function isEnemyInCenter(enemy, detector) {
		if (enemy.direction == "left" && typeof detector["left"] !== "undefined") {
			if (enemy.body.center.x < detector.body.center.x) {
				changeDir(enemy, detector);
			}
		}
		else if (enemy.direction == "right" && typeof detector["right"] !== "undefined") {
			if (enemy.body.center.x > detector.body.center.x) {
				changeDir(enemy, detector);
			}
		}
		else if (enemy.direction == "up" && typeof detector["up"] !== "undefined") {
			if (enemy.body.center.y < detector.body.center.y) {
				changeDir(enemy, detector);
			}
		}
		else if (enemy.direction == "down" && typeof detector["down"] !== "undefined") {
			if (enemy.body.center.y > detector.body.center.y) {
				changeDir(enemy, detector);
			}
		}		
	}
	function changeDir(enemy, detector) {
		switch(detector[enemy.direction]) {
			case "right":
				enemy.direction = "right";
				enemy.reset(detector.body.center.x-(enemy.body.width/2), detector.body.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0+enemy.speed;
				enemy.body.velocity.y = 0;
				break;
			case "left":
				enemy.direction = "left";
				enemy.reset(detector.body.center.x-(enemy.body.width/2), detector.body.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0-enemy.speed;
				enemy.body.velocity.y = 0;
				break;
			case "down":
				enemy.direction = "down";
				enemy.reset(detector.body.center.x-(enemy.body.width/2), detector.body.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0;
				enemy.body.velocity.y = 0+enemy.speed;
				break;
			case "up":
				enemy.direction = "up";
				enemy.reset(detector.body.center.x-(enemy.body.width/2), detector.body.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0;
				enemy.body.velocity.y = 0-enemy.speed;
				break;
		}
	}
	function copyAndDragTower(tower){
		var t = Tower(tower.x, tower.y, tower.key);
		currently_dragging = true;
		being_dragged = t;
		marker = game.add.graphics();		
	    // marker.lineStyle(2, 0x000000, 1);
	    marker.beginFill(0x0BFF0B, 0.3)
	    marker.drawRect(t.left, t.top, t.actualWidth, t.actualHeight);
	    being_dragged.z = 13;
	    being_dragged.bringToTop();

		game.input.onDown.add(function(){ 
			marker.destroy();
			currently_dragging=false;
			game.input.onDown.removeAll();
		}, this);
	}
	var Tower = function(x, y, key) {
		var tower;
		switch(key) {
			case 'tower1': 
				tower = this.game.add.sprite(x, y, key);
				tower.speed = 0.6;
				tower.doesDamage = 0.7;
				tower.top = 4;
				tower.left = 9;
				tower.actualHeight = 50;
				tower.actualWidth = 40;
				break;
			case 'tower2': 
				tower = this.game.add.sprite(x, y, key);
				tower.speed = 0.9;
				tower.doesDamage = 0.4;
				tower.top = 12;
				tower.left = 13;
				tower.actualHeight = 40;
				tower.actualWidth = 30;
				break;
			case 'tower3': 
				tower = this.game.add.sprite(x, y, key);
				tower.speed = 0.5;
				tower.doesDamage = 1;
				tower.top = -1;
				tower.left = 8;
				tower.actualHeight = 56;
				tower.actualWidth = 40;
				break;
			}
		game.physics.enable(tower, Phaser.Physics.ARCADE);
		// tower.body.immovable = true;
		towers.add(tower);
		return tower;		
	}

	var Path = function(x, y, type) {
		var path;
		switch(type) {
			case 1: path = this.game.add.sprite(x, y, 'corner1');
				break;
			case 2: path = this.game.add.sprite(x, y, 'corner2');
				break;
			case 3: path = this.game.add.sprite(x, y, 'corner3');
				break;
			case 4: path = this.game.add.sprite(x, y, 'corner4');
				break;
			case 5: path = this.game.add.sprite(x, y, 'horizontal');
				break;
			case 6: path = this.game.add.sprite(x, y, 'vertical');		
				break;	
		}
		if (type < 5) {
			Detector(x, y, type);
		}
		game.physics.enable(path, Phaser.Physics.ARCADE);
		path.body.immovable = true;
		paths.add(path);
		return path;
	}

	var Detector = function(x, y, type) {
		var detector = this.game.add.sprite(x+19, y+19, 'detector');
		switch(type) {
			case 1: detector["right"] = "up";
					detector["down"] = "left";
				break;
			case 2: detector["left"] = "up";
					detector["down"] = "right";
				break;
			case 3: detector["up"] = "right";
					detector["left"] = "up";
				break;
			case 4: detector["right"] = "down";
					detector["up"] = "left";
				break;
		}
		detector.visible = false;
		game.physics.enable(detector, Phaser.Physics.ARCADE);
		detectors.add(detector);
	}

	var Enemy = function(centerx, centery, type) {
		var enemy;
		switch(type) {
			case 1: enemy = this.game.add.sprite(centerx, centery, 'badguy1');
				enemy.speed = 75;
				break;
			case 2: enemy = this.game.add.sprite(centerx, centery, 'badguy2');
				enemy.speed = 100;
				break;
			case 3: enemy = this.game.add.sprite(centerx, centery, 'badguy3');
				enemy.speed = 50;
				break;
		}
		enemy.direction = null;
		game.physics.enable(enemy, Phaser.Physics.ARCADE);
		enemies.add(enemy);
		return enemy;
	}
	var game = new Phaser.Game(800, 600, Phaser.AUTO, 'gamescreen');
	this.game.state.add('Preload', Game.Preload);
	this.game.state.add('Titlescreen', Game.Titlescreen);
	this.game.state.add('Lvlselect', Game.Lvlselect);
	this.game.state.add('Actualgame', Game.Actualgame);
	this.game.state.start('Preload');
</script>
<% end %>