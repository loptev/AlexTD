<% content_for :title, "Tower Defense | Home" %>
<div class="row">
	<div class="large-9 columns">
		<h1>Tower Defense Game</h1>
		<div id="gamescreen">
		</div>
	</div>

	<div class="large-3 columns">
		<h2 style="text-align:center">High Scores</h2>
		<table style="margin-bottom:0">
			<tr>
				<th style = "width:200px">Username</th>
				<th style = "width:100px">High Score</th>
			</tr>
		</table>
		<table id="scoreboard">
			<% @highscores.each do |user| %>
			<tr><td style = "width:200px"><%= user.username %></td><td style = "width:100px"><%= user.highscore %></td></tr>
			<% end %>
		</table>
	</div>
</div>
<%= javascript_include_tag "phaser.min.js" %>

<% content_for :js do %>
<script type="text/javascript">
	var level_data, current_level, detectors, paths, enemies, enemystack = [], towers, counter = 100;
	var Game = {};

	Game.Preload = function(game){};
	Game.Preload.prototype = {
		preload: function() {
			this.game.load.spritesheet('playbutton', '<%= asset_path('PlayButton.png') %>', 158, 30);
			this.game.load.image('titleback', '<%= asset_path('titlebackground.png') %>');
			this.game.load.image('lvlselectback', '<%= asset_path('levelselect.png') %>');
			this.game.load.image('detector', '<%= asset_path('detector.png') %>');
			this.game.load.image('background', '<%= asset_path('grass1.jpg') %>');
			this.game.load.image('badguy1', '<%= asset_path('badguy1.png') %>');
			this.game.load.image('badguy2', '<%= asset_path('badguy2.png') %>');
			this.game.load.image('badguy3', '<%= asset_path('badguy3.png') %>');
			this.game.load.image('tower1', '<%= asset_path('tower.png') %>');
			this.game.load.image('corner1', '<%= asset_path('corner_path_1.png') %>');
			this.game.load.image('corner2', '<%= asset_path('corner_path_2.png') %>');
			this.game.load.image('corner3', '<%= asset_path('corner_path_3.png') %>');
			this.game.load.image('corner4', '<%= asset_path('corner_path_4.png') %>');
			this.game.load.image('horizontal', '<%= asset_path('horizontal_path.png') %>');
			this.game.load.image('vertical', '<%= asset_path('vertical_path.png') %>');
		},
		create: function() {
			console.log("Preload State Started");
			this.game.state.start('Titlescreen');
		},
	}
	Game.Titlescreen = function(game) {};
	Game.Titlescreen.prototype = {
		create: function() {
			console.log("Titlescreen State Started");
			this.game.add.sprite(0, 0, 'titleback');
			this.game.add.button(this.game.world.centerX - 79, this.game.world.centerY - 90, 'playbutton', function() { 
				this.game.state.start('Actualgame', true, false, 1); 
			}, this, 0, 1, 2);
		},
	};
	Game.Lvlselect = function(game) {};
	Game.Lvlselect.prototype = {
		create: function() {
			console.log("Lvlselect State Started");
			this.game.add.sprite(0, 0, 'lvlselectback');
			// Set current_level
		},
	};	
	Game.Actualgame = function(game) {
		this.level;
	};
	Game.Actualgame.prototype = {
		init: function(level) {
			console.log("Actualgame State Started");
			this.level = level
		},
		create: function() {
			var background = this.game.add.sprite(0, 0, 'background');
			paths = this.game.add.group();
			detectors = this.game.add.group();
			enemies = this.game.add.group();
			towers = this.game.add.group();
			setuplvl(this.level);
		},
		update: function() {
			if (this.game.initiated){
				this.game.physics.overlap(enemies, detectors, isEnemyInCenter, null, this);
				if (enemystack.length > 0 && counter >= 100) {
					var enemy = enemystack.shift();
					enemy = Enemy(parseInt(level_data.spawnlocation.x), parseInt(level_data.spawnlocation.y), parseInt(enemy));
					enemy.body.velocity.x = enemy.speed;
					enemy.direction = level_data.startdirection;
					console.log("created enemy");
					counter = 0;
				}
				counter++;				
			}
		}
	};
	function setuplvl(lvl) {
		$.getJSON('<%= asset_path('levels.json') %>', function(data) {
			level_data = data[lvl];
			drawpaths();
			for (var i = 0; i < level_data.enemies.length; i++) {
				enemystack[i] = level_data.enemies[i];
			}
		});
		this.game.initiated = true;
	}
	function drawpaths() {
		for (var i = 0; i<level_data.paths.length; i++) {
			 	var path = level_data.paths[i];
			 	console.log("" + path.x + ", " + path.y + ", " + path.type);
			 	Path(parseInt(path.x), parseInt(path.y), parseInt(path.type));
		}
		
	}
	function isEnemyInCenter(enemy, detector) {
		if (enemy.direction == "left" && typeof detector["left"] !== "undefined") {
			if (enemy.center.x < detector.center.x) {
				changeDir(enemy, detector);
			}
		}
		else if (enemy.direction == "right" && typeof detector["right"] !== "undefined") {
			if (enemy.center.x > detector.center.x) {
				changeDir(enemy, detector);
			}
		}
		else if (enemy.direction == "up" && typeof detector["up"] !== "undefined") {
			if (enemy.center.y < detector.center.y) {
				changeDir(enemy, detector);
			}
		}
		else if (enemy.direction == "down" && typeof detector["down"] !== "undefined") {
			if (enemy.center.y > detector.center.y) {
				changeDir(enemy, detector);
			}
		}		
	}

	function changeDir(enemy, detector) {
		switch(detector[enemy.direction]) {
			case "right":
				enemy.direction = "right";
				enemy.reset(detector.center.x-(enemy.body.width/2), detector.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0+enemy.speed;
				enemy.body.velocity.y = 0;
				break;
			case "left":
				enemy.direction = "left";
				enemy.reset(detector.center.x-(enemy.body.width/2), detector.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0-enemy.speed;
				enemy.body.velocity.y = 0;
				break;
			case "down":
				enemy.direction = "down";
				enemy.reset(detector.center.x-(enemy.body.width/2), detector.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0;
				enemy.body.velocity.y = 0+enemy.speed;
				break;
			case "up":
				enemy.direction = "up";
				enemy.reset(detector.center.x-(enemy.body.width/2), detector.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0;
				enemy.body.velocity.y = 0-enemy.speed;
				break;
		}
	}

	var Path = function(x, y, type) {
		var path;
		switch(type) {
			case 1: path = this.game.add.sprite(x, y, 'corner1');
				break;
			case 2: path = this.game.add.sprite(x, y, 'corner2');
				break;
			case 3: path = this.game.add.sprite(x, y, 'corner3');
				break;
			case 4: path = this.game.add.sprite(x, y, 'corner4');
				break;
			case 5: path = this.game.add.sprite(x, y, 'horizontal');
				break;
			case 6: path = this.game.add.sprite(x, y, 'vertical');		
				break;	
		}
		if (type < 5) {
			Detector(x, y, type);
		}
		path.body.immovable = true;
		paths.add(path);
		return path;
	}

	var Detector = function(x, y, type) {
		var detector = this.game.add.sprite(x+19, y+19, 'detector');
		switch(type) {
			case 1: detector["right"] = "up";
					detector["down"] = "left";
				break;
			case 2: detector["left"] = "up";
					detector["down"] = "right";
				break;
			case 3: detector["up"] = "right";
					detector["left"] = "up";
				break;
			case 4: detector["right"] = "down";
					detector["up"] = "left";
				break;
		}
		detector.visible = false;
		detectors.add(detector);
	}

	var Enemy = function(centerx, centery, type) {
		var enemy;
		switch(type) {
			case 1: enemy = this.game.add.sprite(centerx, centery, 'badguy1');
				enemy.speed = 75;
				break;
			case 2: enemy = this.game.add.sprite(centerx, centery, 'badguy2');
				enemy.speed = 100;
				break;
			case 3: enemy = this.game.add.sprite(centerx, centery, 'badguy3');
				enemy.speed = 50;
				break;
		}
		enemy.direction = null;
		enemies.add(enemy);
		return enemy;
	}
	var game = new Phaser.Game(800, 600, Phaser.AUTO, 'gamescreen');
	this.game.state.add('Preload', Game.Preload);
	this.game.state.add('Titlescreen', Game.Titlescreen);
	this.game.state.add('Lvlselect', Game.Lvlselect);
	this.game.state.add('Actualgame', Game.Actualgame);
	this.game.state.start('Preload');
</script>
<% end %>