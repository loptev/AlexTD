<% content_for :title, "Tower Defense | Home" %>
<div class="row">
	<div class="large-9 columns">
		<h1>Tower Defense Game</h1>
		<div id="gamescreen">
		</div>
	</div>

	<div class="large-3 columns">
		<h2 style="text-align:center">High Scores</h2>
		<table style="margin-bottom:0">
			<tr>
				<th style = "width:200px">Username</th>
				<th style = "width:100px">High Score</th>
			</tr>
		</table>
		<table id="scoreboard">
			<% @highscores.each do |user| %>
			<tr><td style = "width:200px"><%= user.username %></td><td style = "width:100px"><%= user.highscore %></td></tr>
			<% end %>
		</table>
	</div>
</div>
<% content_for :js do %>
<%= javascript_include_tag "phaser.min.js" %>
<script type="text/javascript">
	var level_data,
		tile, map, lives,
		ground, marker, placable,
		currently_dragging, being_dragged,
		startmoney = 400, 
		currentmoney, moneysymbol, moneysymboldos, livessymbol,
		currentmoneytext, dragtext, livestext,
		tower1, tower2, tower3,
		// Groups
		detectors, paths, enemies, towers, markers, ranges,
		enemystack = [], 
		counter = 100,
		startwave, startwavebutton, wave = 0;
	var Game = {};

	Game.Preload = function(game){};
	Game.Preload.prototype = {
		preload: function() {
			game.load.spritesheet('startwavebutton', '<%= asset_path('startwave_button.png') %>', 158, 30, 3);
			game.load.tilemap('desert', '<%= asset_path('tilemap.json') %>', null, Phaser.Tilemap.TILED_JSON);
    		game.load.image('tile_image', '<%= asset_path('desert_tiles_small.png') %>');
			game.physics.startSystem(Phaser.Physics.ARCADE);
			game.load.image('money', '<%= asset_path('foolsgold.png') %>');
			game.load.image('lifeheart', '<%= asset_path('heartupdated.png') %>');
			game.load.spritesheet('playbutton', '<%= asset_path('PlayButton.png') %>', 158, 30);
			game.load.spritesheet('lvlselect', '<%= asset_path('levelselect_button.png') %>', 158, 30);
			game.load.image('titleback', '<%= asset_path('titlebackground.png') %>');
			game.load.image('lvlselectback', '<%= asset_path('levelselect.png') %>');
			game.load.spritesheet('levelone', '<%= asset_path('button_1.png') %>', 90, 90, 2);
			game.load.image('detector', '<%= asset_path('detector.png') %>');
			game.load.image('badguy1', '<%= asset_path('badguy1.png') %>');
			game.load.image('badguy2', '<%= asset_path('badguy2.png') %>');
			game.load.image('badguy3', '<%= asset_path('badguy3.png') %>');
			game.load.spritesheet('tower1', '<%= asset_path('towerspritesheet1.png') %>', 56, 56, 8);
			game.load.spritesheet('tower2', '<%= asset_path('towerspritesheet2.png') %>', 56, 56, 8);
			game.load.spritesheet('tower3', '<%= asset_path('towerspritesheet3.png') %>', 56, 56, 8);
			game.load.spritesheet('placableBox','<%= asset_path('placableBox.png') %>', 35, 35, 2);
			game.load.spritesheet('range', '<%= asset_path('range.png') %>', 35, 35, 2);
			game.load.spritesheet('bullet1', '<%= asset_path('Bullet1.png') %>', 10, 10, 9);
			game.load.spritesheet('bullet2', '<%= asset_path('Bullet2.png') %>', 10, 10, 9);
			//Bullet2 does not go with a tower
			game.load.spritesheet('bullet3', '<%= asset_path('Bullet3.png') %>', 10, 10, 9);
			game.load.spritesheet('bullet4', '<%= asset_path('Bullet4.png') %>', 10, 10, 9);
		},
		create: function() {
			console.log("Preload State Started");
			game.state.start('Titlescreen');
		}
	};
	Game.Titlescreen = function(game) {};
	Game.Titlescreen.prototype = {
		create: function() {
			console.log("Titlescreen State Started");
			game.add.sprite(0, 0, 'titleback');
			game.add.button(game.world.centerX - 79, game.world.centerY - 90, 'playbutton', function() { 
				game.state.start('ActualGame', true, false, 1); 
			}, this, 0, 1, 2);
			game.add.button(game.world.centerX - 79, game.world.centerY - 30, 'lvlselect', function() {
				game.state.start('Lvlselect', true, false);
			}, this, 0, 1, 2);
		}
	};
	Game.Lvlselect = function(game) {};
	Game.Lvlselect.prototype = {
		create: function() {
			console.log("Lvlselect State Started");
			this.game.add.sprite(0, 0, 'lvlselectback');
			this.game.add.button(game.world.centerX - 45, game.world.centerY - 45, 'levelone', function() {
				game.state.start('ActualGame', true, false, 1);
			}, this, 0, 1);
		}
	};	
	Game.ActualGame = function(game) {
		this.level;
	};
	Game.ActualGame.prototype = {
		init: function (level) {
			console.log("ActualGame State Started");
			this.level = level;
			currently_dragging = false;
		},
		create: function() {
			// Create Background and Map
			game.physics.setBoundsToWorld();
			game.add.sprite(0, 0, 'background');
			map = game.add.tilemap('desert');
			map.addTilesetImage('Desert', 'tile_image');
			ground = map.createLayer('Ground');
			ground.resizeWorld();
			
			// Create Detectors
			detectors = game.add.group();
			detectors.enableBody = true;
			ranges = game.add.group();
			ranges.enableBody = true;
			map.createFromObjects('detectors', 4, 'detector', 0, true, false, detectors);
			markers = game.add.group();

			enemies = game.add.group();
			towers = game.add.group();
			game.physics.enable(towers, Phaser.Physics.ARCADE);
			startwavebutton = game.add.button(10, 80, 'startwavebutton', function() { 
				startwave = true;
				buildwave(wave); 
				wave++;
				startwavebutton.visible = false;
			}, this, 0, 1, 2);
			addUI();
			setuplvl(this.level);

			currentmoney = startmoney;
			lives = 30-(this.level*5);
			this.currentmoneytext = this.game.add.text(700, 0, currentmoney);
			livestext = this.game.add.text(715, 30, lives);
			moneysymbol = game.add.sprite(740, 4, 'money');
			livessymbol = game.add.sprite(742, 34, 'lifeheart');
			moneysymboldos = game.add.sprite(450, 4, 'money');
			moneysymboldos.visible = false;
			dragtext = this.game.add.text(200, 0, '');
		},
		update: function() {
			game.physics.arcade.collide(marker, ground);
			if (currently_dragging) {
				being_dragged.reset(game.input.x-being_dragged.center.x, game.input.y-being_dragged.center.y);
				marker.reset(game.input.x-being_dragged.baseWidth/2+2.5, game.input.y-being_dragged.baseHeight/2+4);
				being_dragged.radius.reset(game.input.x-being_dragged.radius.width/2,game.input.y-being_dragged.radius.width/2);
				if (isPlacable(map.getTileWorldXY(game.input.x, game.input.y))) {
					marker.frame = 0;
				} else {
					marker.frame = 1;
				};
			};
			game.physics.arcade.overlap(enemies, ranges, isInRange, null, this);
			game.physics.arcade.overlap(enemies, detectors, isEnemyInCenter, null, this);
			if (startwave) {
				if (enemystack.length > 0) {
					if (counter >= 100) {
						var enemy = enemystack.shift();
						enemy = Enemy(parseInt(level_data.spawnlocation.x), parseInt(level_data.spawnlocation.y), parseInt(enemy));
						enemy.body.velocity.x = enemy.speed;
						enemy.direction = level_data.startdirection;
						counter = 0;
					}
					counter++;
				} else {
					startwavebutton.visible = true;
					startwave = false;
				}
			}
			this.currentmoneytext.text = currentmoney;
			if (currentmoney < 100) {
				moneysymbol.x = 725;
			}
			else if (currentmoney < 10000 && currentmoney > 999) {
				moneysymbol.x = 755;
			}
			livestext.text = lives;
		}
	};
	function setuplvl(lvl) {
		$.getJSON('<%= asset_path('levels.json') %>', function(data) {
			level_data = data[lvl];
		});
	}

	function buildwave(wave) {
		for (var i = 0; i < level_data.enemies.waves[wave].length; i++) {
			enemystack[i] = level_data.enemies.waves[wave][i];
		}
	}	

	function addUI(){
		tower1 = Tower(10, 10, 'tower1');
		tower1.inputEnabled = true;
		tower1.events.onInputDown.add(copyAndDragTower, this);
		tower1.events.onInputOver.add(function(){
			dragtext.text = 'This item costs ' + tower1.cost + '   !';
			moneysymboldos.visible = true;
		});
		tower1.radius.destroy();
		tower1.events.onInputOut.add(function(){
			dragtext.text = '';
			moneysymboldos.visible = false;
		});
		tower2 = Tower(70, 10, 'tower2');
		tower2.inputEnabled = true;
		tower2.events.onInputDown.add(copyAndDragTower, this);
		tower2.events.onInputOver.add(function(){
			dragtext.text = 'This item costs ' + tower2.cost + '   !';
			moneysymboldos.visible = true;
		});
		tower2.radius.destroy();
		tower2.events.onInputOut.add(function(){
			dragtext.text = '';
			moneysymboldos.visible = false;
		});
		tower3 = Tower(130, 10, 'tower3');
		tower3.inputEnabled = true;
		tower3.events.onInputDown.add(copyAndDragTower, this);
		tower3.events.onInputOver.add(function(){
			dragtext.text = 'This item costs ' + tower3.cost + '   !';
			moneysymboldos.visible = true;
		});
		tower3.radius.destroy();
		tower3.events.onInputOut.add(function(){
			dragtext.text = '';
			moneysymboldos.visible = false;
		});
	}
	function isInRange(enemy, rand) {
		alert("Is In Range");
	}
	function isEnemyInCenter(enemy, detector) {
		if (enemy.direction == "left" && typeof detector["left"] !== "undefined") {
			if (enemy.body.center.x < detector.body.center.x) {
				changeDir(enemy, detector);
			}
		}
		else if (enemy.direction == "right" && typeof detector["right"] !== "undefined") {
			if (enemy.body.center.x > detector.body.center.x) {
				changeDir(enemy, detector);
			}
		}
		else if (enemy.direction == "up" && typeof detector["up"] !== "undefined") {
			if (enemy.body.center.y < detector.body.center.y) {
				changeDir(enemy, detector);
			}
		}
		else if (enemy.direction == "down" && typeof detector["down"] !== "undefined") {
			if (enemy.body.center.y > detector.body.center.y) {
				changeDir(enemy, detector);
			}
		}		
	}
	function changeDir(enemy, detector) {
		switch(detector[enemy.direction]) {
			case "right":
				enemy.direction = "right";
				enemy.reset(detector.body.center.x-(enemy.body.width/2), detector.body.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0+enemy.speed;
				enemy.body.velocity.y = 0;
				break;
			case "left":
				enemy.direction = "left";
				enemy.reset(detector.body.center.x-(enemy.body.width/2), detector.body.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0-enemy.speed;
				enemy.body.velocity.y = 0;
				break;
			case "down":
				enemy.direction = "down";
				enemy.reset(detector.body.center.x-(enemy.body.width/2), detector.body.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0;
				enemy.body.velocity.y = 0+enemy.speed;
				break;
			case "up":
				enemy.direction = "up";
				enemy.reset(detector.body.center.x-(enemy.body.width/2), detector.body.center.y-(enemy.body.height/2));
				enemy.body.velocity.x = 0;
				enemy.body.velocity.y = 0-enemy.speed;
				break;
		}
	}
	function copyAndDragTower(tower){
		if (!currently_dragging && tower.cost <= currentmoney){
			currently_dragging = true;
			placable = true;
			toggleRanges(currently_dragging);
			being_dragged = Tower(tower.x, tower.y, tower.key);
			marker = game.add.sprite(0, 0,'placableBox');
			game.physics.enable(marker, Phaser.Physics.ARCADE);
			marker.scale.x = being_dragged.baseWidth/marker.body.width
			marker.scale.y = being_dragged.baseHeight/marker.body.height
			game.input.onDown.add(function(){
				if (placable==true && (game.input.x>190 || game.input.y>80)) {
					if (game.input.mouse.event.button == 2) {
						game.input.mouse.event.preventDefault();
		    			being_dragged.destroy();
		    		};
		    		toggleRanges(false);
					marker.destroy();
					towers.add(being_dragged);
					currently_dragging=false;
					game.input.onDown.removeAll();		
					currentmoney -= being_dragged.cost;		
				}
			}, this);
		}
	}
	function toggleRanges(currently_dragging){
		if (currently_dragging){
			for (x = 0; x<ranges.children.length; x++){
			   ranges.children[x].frame = 0;
			}
		} else {
			for (x = 0; x<ranges.children.length; x++){
			   ranges.children[x].frame = 1;
			}		
		}
	};
	function makeTowerRadius(tower){
		tower.radius = game.add.sprite(tower.bulletStart.x(), tower.bulletStart.y(), 'range');
		game.physics.enable(tower.radius, Phaser.Physics.ARCADE);
		tower.radius.scale.x = tower.range;
		tower.radius.scale.y = tower.range;
		tower.radius.tower = tower;
        ranges.add(tower.radius);
	}
	function isPlacable(t) {
		placable = true;
		if (game.physics.arcade.overlap(marker, towers, function(){placable=false})){
		} else {
		switch(t.index) {
			case 1: 
				if (((marker.x + being_dragged.baseWidth)>(t.worldX+14)) && ((marker.y + being_dragged.baseHeight)>(t.worldY+14))){
					placable = false;
				} else {
					placable = true;
				};
				break;
				case 2: 
					if ((marker.y + being_dragged.baseHeight) > (t.worldY+14)){
						placable = false;
					} else {
						placable = true;
					};
					break;
				case 3: 
					if ((marker.x < (t.worldX+14)) && ((marker.y + being_dragged.baseHeight) > (t.worldY+14))) {
						placable = false;
					} else {
						placable = true;
					};
					break;
				case 9:
					if ((marker.x + being_dragged.baseWidth) >= (t.worldX+14)){
						placable = false;
					} else {
						placable = true;
					};
					break;
				case 10: 
					placable = false;
					break;
				case 11:
					if (marker.x < (t.worldX+14)){
						placable = false;
					} else {
						placable = true;
					};
					break;
				case 17: 
					if (((marker.x + being_dragged.baseWidth) > (t.worldX+14)) && (marker.y < (t.worldY+14))) {
						placable = false;
					} else {
						placable = true;
					};
					break;
				case 18: 
					if (marker.y < (t.worldY+14)) {
						placable = false;
					} else {
						placable = true;
					};
					break;
				case 19: 
					if ((marker.x < (t.worldX+14)) && (marker.y < (t.worldY+14))) {
						placable = false;
					} else {
						placable = true;
					};
					break;
				case 20: 
					if ((marker.x < (t.worldX+14)) || (marker.y < (t.worldY+14))) {
						placable = false;
					} else {
						placable = true;
					};
					break;
				case 21: 
					if (((marker.x + being_dragged.baseWidth) > (t.worldX+14)) || (marker.y < (t.worldY+14))) {
						placable = false;
					} else {
						placable = true;
					};
					break;
				case 28: 
					if ((marker.x < (t.worldX+14)) || ((marker.y + being_dragged.baseHeight) > (t.worldY+14))) {
						placable = false;
					} else {
						placable = true;
					};
					break;
				case 29: 
					if (((marker.x + being_dragged.baseWidth) > (t.worldX+14)) || ((marker.y + being_dragged.baseHeight) > (t.worldY+14))) {
						placable = false;
					} else {
						placable = true;
					};
					break;
			};
		};
		return placable;
	}
	function shoot(tower, enemy) {
		var bullet;
		switch(tower.bullettype) {
			case 1:
				bullet = game.add.sprite(tower.x, tower.y, 'bullet1');
			break;
			case 2:
				bullet = game.add.sprite(tower.x, tower.y, 'bullet2');
			break;
			case 4:
				bullet = game.add.sprite(tower.x, tower.y, 'bullet4');
			break;
		}
		//USE => this.game.physics.moveToObject(bullet, this.player, BULLETSPEED);
	}
	function enemyout(enemy) {
		enemy.kill();
		lives = lives-1;
	}
	var Tower = function(x, y, key) {
		var tower;
		switch(key) {
			case 'tower1': 
				tower = this.game.add.sprite(x, y, key);
				tower.speed = 0.6;
				tower.range = 6.5;
				tower.doesDamage = 0.7;
				tower.center = { "x": 28, "y": 35 };
				tower.bulletStart = { "x": function (){ return tower.x + 28 }, "y": function(){ return tower.y + 26 } };
				tower.baseHeight = 33;
				tower.baseWidth = 37;
				tower.bullettype = 1;
				tower.cost = 350;
				break;
			case 'tower2': 
				tower = this.game.add.sprite(x, y, key);
				tower.speed = 0.9;
				tower.range = 4;
				tower.doesDamage = 0.6;
				tower.center = { "x": 27, "y": 35 };
				tower.bulletStart = { "x": function(){ return tower.x + 28 }, "y": function(){ return tower.y + 27 } };
				tower.baseHeight = 24;
				tower.baseWidth = 25;
				tower.bullettype = 2;
				tower.cost = 200;
				break;
			case 'tower3': 
				tower = this.game.add.sprite(x, y, key);
				tower.speed = 0.5;
				tower.range = 9;
				tower.doesDamage = 1;
				tower.center = { "x": 26, "y": 35 };
				tower.bulletStart = { "x": function(){ return tower.x + 28}, "y": function(){ return tower.y + 20} };
				tower.baseHeight = 29;
				tower.baseWidth = 36;
				tower.bullettype = 4;
				tower.cost = 525;
				break;
			}
		game.physics.enable(tower, Phaser.Physics.ARCADE);
		makeTowerRadius(tower);
		return tower;		
	}
	var Bullet = function(tower, enemy) {
		var bullet;
		switch(tower.bullettype) {
			case 1:
				bullet = this.game.add.sprite(tower.body.center.x, tower.body.center.y, 'bullet1');
			break;
			case 2:
				bullet = this.game.add.sprite(tower.body.center.x, tower.body.center.y, 'bullet2');
			break;
			case 3:
				bullet = this.game.add.sprite(tower.body.center.x, tower.body.center.y-10, 'bullet3');
			break;
		}

	}
	var Path = function(x, y, type) {
		var path;
		switch(type) {
			case 1: path = this.game.add.sprite(x, y, 'corner1');
				break;
			case 2: path = this.game.add.sprite(x, y, 'corner2');
				break;
			case 3: path = this.game.add.sprite(x, y, 'corner3');
				break;
			case 4: path = this.game.add.sprite(x, y, 'corner4');
				break;
			case 5: path = this.game.add.sprite(x, y, 'horizontal');
				break;
			case 6: path = this.game.add.sprite(x, y, 'vertical');		
				break;	
		}
		if (type < 5) {
			Detector(x, y, type);
		}
		game.physics.enable(path, Phaser.Physics.ARCADE);
		path.body.immovable = true;
		paths.add(path);
		return path;
	}

	var Detector = function(x, y, type) {
		var detector = this.game.add.sprite(x+19, y+19, 'detector');
		switch(type) {
			case 1: detector["right"] = "up";
					detector["down"] = "left";
				break;
			case 2: detector["left"] = "up";
					detector["down"] = "right";
				break;
			case 3: detector["up"] = "right";
					detector["left"] = "up";
				break;
			case 4: detector["right"] = "down";
					detector["up"] = "left";
				break;
		}
		detector.visible = false;
		game.physics.enable(detector, Phaser.Physics.ARCADE);
		detectors.add(detector);
	}

	var Enemy = function(centerx, centery, type) {
		var enemy;
		switch(type) {
			case 1: enemy = this.game.add.sprite(centerx, centery, 'badguy1');
				enemy.speed = 75;
				break;
			case 2: enemy = this.game.add.sprite(centerx, centery, 'badguy2');
				enemy.speed = 100;
				break;
			case 3: enemy = this.game.add.sprite(centerx, centery, 'badguy3');
				enemy.speed = 50;
				break;
		}
		game.physics.enable(enemy, Phaser.Physics.ARCADE);
		enemy.checkWorldBounds = true;
		enemy.events.onOutOfBounds.add(enemyout, this );
		//enemy.outOfBoundsKill = true;
		enemy.direction = null;
		
		// enemy.events.onKilled.add(function() {
		// 	console.log('this 1st thing happened');
		// 	if (enemy.x > 790) {
		// 		console.log('this happened');
		// 		lives = lives-1;
		// 		console.log('this other thing happened');
		// 	}
		// 	console.log('this last thing happened');
		// });
		enemies.add(enemy);
		return enemy;
	}
	var game = new Phaser.Game(800, 600, Phaser.AUTO, 'gamescreen');
	this.game.state.add('Preload', Game.Preload);
	this.game.state.add('Titlescreen', Game.Titlescreen);
	this.game.state.add('Lvlselect', Game.Lvlselect);
	this.game.state.add('ActualGame', Game.ActualGame);
	this.game.state.start('Preload');
</script>
<% end %>